package com.watch.ejb;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.UUID;
import java.util.logging.Logger;

import javax.ejb.Stateless;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;

/**
 * <p>
 * Title: ejb title
 * </p>
 * <p>
 * Description: t_loc_electfence EJB Interface Bean 处理类
 * </p>
 * 
 * @author yangqinxu 电话：137****5317
 * @version 1.0 时间 2015-6-25 9:51:03
 */
@Stateless(mappedName = "LocElectfenceService")
public class LocElectfenceBean implements LocElectfenceService {

	private final static Logger logger = Logger.getLogger(LocElectfenceBean.class.getName());  
	
	@PersistenceContext(unitName = "ejbpro1")
	private EntityManager manager;

	@Override
	public void Add(LocElectfence locElectfenceInfo) {
		locElectfenceInfo.setFlocfenid(UUID.randomUUID().toString());
		manager.persist(locElectfenceInfo);
	}

	@Override
	public void Update(LocElectfence locElectfenceInfo) {
		manager.merge(locElectfenceInfo);
	}

	@Override
	public void Delete(String id) {
		LocElectfence locElectfenceInfo = manager.find(LocElectfence.class, id);

		manager.remove(locElectfenceInfo);
	}

	@Override
	public LocElectfence find(String id) {
		LocElectfence locElectfenceInfo = manager.find(LocElectfence.class, id);
		return locElectfenceInfo;
	}

	private String GetWhere(HashMap<String, String> map) {
		String where = "";

		// queryMap.put("serialNumber", serialNumber);
		// queryMap.put("areaNumber", areaNumber);
		// queryMap.put("areaName", areaName);

		if (map != null && map.size() > 0) {
			if (map.containsKey("serialNumber")
					&& map.get("serialNumber") != null
					&& !map.get("serialNumber").toString().equals("")) {
				where += " and a.FSerialnumber = '" + map.get("serialNumber")
						+ "' ";
			}
			if (map.containsKey("areaNumber") && map.get("areaNumber") != null
					&& !map.get("areaNumber").toString().equals("")) {
				where += " and b.id = " + map.get("areaNumber") + " ";
			}
			if (map.containsKey("areaName") && map.get("areaName") != null
					&& !map.get("areaName").toString().equals("")) {
				where += " and b.name like '%" + map.get("areaName") + "%' ";
			}
			// a.FUpdateTime>='2015-02-12 22:12:23'  and  FUpdateTime<='2015-08-12 22:12:23'
			 
			if (map.containsKey("startTime") && map.get("startTime") != null
					&& !map.get("startTime").toString().equals("")) {
				where += " and a.FUpdateTime >= '" + map.get("startTime") + "' ";
			}
			if (map.containsKey("endTime") && map.get("endTime") != null
					&& !map.get("endTime").toString().equals("")) {
				where += " and a.FUpdateTime <= '" + map.get("endTime") + "' ";
			}
			
			if (map.containsKey("fdatastatus") && map.get("fdatastatus") != null
					&& !map.get("fdatastatus").toString().equals("")) {
				where += " and a.fdatastatus = " + map.get("fdatastatus") + " ";
			}
			
		}
		return where;
	}

	@Override
	public int GetCount(HashMap<String, String> map) {

		String where = GetWhere(map);

		StringBuffer sql = new StringBuffer();
		sql.append(" SELECT count(*) ");
		sql.append(" FROM T_LOC_ELECTFENCE a left join electfence b on a.FEltFenceID = b.id ");		
		sql.append(" WHERE 1 = 1 ");
		sql.append(where);


		Query query = manager.createNativeQuery(sql.toString());
		int total = (new Integer(query.getSingleResult().toString()));

		return total;
		
//		String hql = "select count(*) from LocElectfence";
//		Query query = manager.createQuery(hql);
//		int total = (new Integer(query.getSingleResult().toString()));
//		return total;
	}



	private List<Electfence> GetSerialAreaList(HashMap<String, String> map) {

		//String where = "and a.serialnumber='" + serialnumber + "'";
		
		String where = "";

		if (map.containsKey("serialNumber") && map.get("serialNumber") != null
				&& !map.get("serialNumber").toString().equals("")) {
			where += " and a.serialnumber = '" + map.get("serialNumber")
					+ "' ";
		}
		if (map.containsKey("areaNumber") && map.get("areaNumber") != null
				&& !map.get("areaNumber").toString().equals("")) {
			where += " and a.id = " + map.get("areaNumber") + " ";
		}
		
		StringBuffer sql = new StringBuffer();

		sql.append(" SELECT a.id,a.serialnumber,a.areanum,a.name,a.locationbd,a.locationgd,a.model,a.scope,a.createtime,a.updatetime,a.status ");
		sql.append(" FROM ELECTFENCE a ");
		sql.append(" WHERE 1 = 1 ");
		sql.append(where);

		Query query = manager.createNativeQuery(sql.toString());

		List rows = query.getResultList();
		List<Electfence> LocElectfences = new ArrayList<Electfence>();

		for (Object row : rows) {
			Object[] cells = (Object[]) row;
			Electfence item = new Electfence();
			item.setAreanum((Integer) cells[0]);
			LocElectfences.add(item);
		}

		return LocElectfences;
	}


	private List<LocElectfence> getTop1ByElectfence(HashMap<String, String> map) {

		String where = "";

		if (map.containsKey("serialNumber") && map.get("serialNumber") != null
				&& !map.get("serialNumber").toString().equals("")) {
			where += " and a.FSerialnumber = '" + map.get("serialNumber")
					+ "' ";
		}
		if (map.containsKey("areaNumber") && map.get("areaNumber") != null
				&& !map.get("areaNumber").toString().equals("")) {
			where += " and b.id = " + map.get("areaNumber") + " ";
		}

		StringBuffer sql = new StringBuffer();
		sql.append(" SELECT a.FLocFenID,a.FIncreaseID,a.FEltFenceID,a.FSerialnumber,a.FDataStatus,a.FFieldStatus,a.FEltLongitude,a.FEltLatitude,a.FEltScope,a.FEltAddress,a.FLongitude,a.FLatitude,a.FAddress,a.FDistance,a.FAddTime,a.FUpdateTime,a.FRemark ");
		sql.append(" ,a.FReadCount,b.id,b.name ");
//		sql.append(" ,IFNULL(b.areanum,0),IFNULL(b.name,'') ");

		sql.append(" FROM T_LOC_ELECTFENCE a inner join electfence b on a.FEltFenceID = b.id ");
		sql.append(" WHERE 1 = 1 ");

		sql.append(where);
		sql.append(" order by a.FIncreaseID desc ");
		sql.append("limit 0,1");

		Query query = manager.createNativeQuery(sql.toString());

		List rows = query.getResultList();
		List<LocElectfence> LocElectfences = new ArrayList<LocElectfence>();

		for (Object row : rows) {
			Object[] cells = (Object[]) row;

			LocElectfence item = new LocElectfence();

			item.setFlocfenid((String) cells[0]);
			item.setFincreaseid((Integer) cells[1]);
			item.setFeltfenceid((Integer) cells[2]);
			item.setFserialnumber((String) cells[3]);
			item.setFdatastatus((Integer) cells[4]);
			item.setFfieldstatus((Integer) cells[5]);
			item.setFeltlongitude((String) cells[6]);
			item.setFeltlatitude((String) cells[7]);
			item.setFeltscope((Double) cells[8]);
			item.setFeltaddress((String) cells[9]);
			item.setFlongitude((String) cells[10]);
			item.setFlatitude((String) cells[11]);
			item.setFaddress((String) cells[12]);
			item.setFdistance((Double) cells[13]);
			item.setFaddtime((java.sql.Timestamp) cells[14]);
			item.setFupdatetime((java.sql.Timestamp) cells[15]);
			item.setFremark((String) cells[16]);
			
//			if(cells[17]!=null && !cells[17].toString().equals(""))
//			{
//				
//			}
			item.setFreadCount((Integer) cells[17]);
			item.setFareanumber((Integer) cells[18]);
			item.setFareaname((String) cells[19]);

			LocElectfences.add(item);
			
			
			//更新读写次数
			String updateSql = "update T_LOC_ELECTFENCE set FReadCount=FReadCount+1  WHERE  FLocFenID= :FLocFenID ";
			Query updateQuery = manager.createNativeQuery(updateSql);
			updateQuery.setParameter("FLocFenID", item.getFlocfenid());
			updateQuery.executeUpdate();
			
		}
		return LocElectfences;
	}

	@Override
	public List<LocElectfence> ListLocElectfenceTop1(int offset, int length,
			HashMap<String, String> map) {

		List<LocElectfence> locEltReturn = new ArrayList<LocElectfence>();
		if(map == null || map.size()==0)
		{
			return locEltReturn;
		}
		
		if(map.get("serialNumber") ==null || map.get("serialNumber").toString().equals(""))
		{
			return locEltReturn;
		}
		
		List<Electfence> elct = this.GetSerialAreaList(map);

		
		if (elct != null && elct.size() > 0) {
			for (int i = 0; i < elct.size(); i++) {
				
				Electfence item = elct.get(i);

				HashMap<String, String> map1 = new HashMap<String, String>();
				map1.put("serialNumber", map.get("serialNumber"));
				map1.put("areaNumber", item.getAreanum().toString());

				List<LocElectfence> locelts = this.getTop1ByElectfence(map1);
				if (locelts != null && locelts.size() > 0) {
					locEltReturn.add(locelts.get(0));
				}

			}
		}

		return locEltReturn;

	}

	@Override
	public List<LocElectfence> ListLocElectfence(int offset, int length,
			HashMap<String, String> map) {

		
		String where = GetWhere(map);

		StringBuffer sql = new StringBuffer();
		sql.append(" SELECT a.FLocFenID,a.FIncreaseID,a.FEltFenceID,a.FSerialnumber,a.FDataStatus,a.FFieldStatus,a.FEltLongitude,a.FEltLatitude,a.FEltScope,a.FEltAddress,a.FLongitude,a.FLatitude,a.FAddress,a.FDistance,a.FAddTime,a.FUpdateTime,a.FRemark ");
		sql.append(" ,b.id,b.name ");
		sql.append(" FROM T_LOC_ELECTFENCE a left join electfence b on a.FEltFenceID = b.id ");		
		sql.append(" WHERE 1 = 1 ");
		sql.append(where);
		sql.append(" order by a.FIncreaseID desc ");
		sql.append("limit "+offset+"," + length + "");

		Query query = manager.createNativeQuery(sql.toString());

		List rows = query.getResultList();
		List<LocElectfence> LocElectfences = new ArrayList<LocElectfence>();

		for (Object row : rows) {
			Object[] cells = (Object[]) row;

			LocElectfence item = new LocElectfence();

			item.setFlocfenid((String) cells[0]);
			item.setFincreaseid((Integer) cells[1]);
			item.setFeltfenceid((Integer) cells[2]);
			item.setFserialnumber((String) cells[3]);
			item.setFdatastatus((Integer) cells[4]);
			item.setFfieldstatus((Integer) cells[5]);
			item.setFeltlongitude((String) cells[6]);
			item.setFeltlatitude((String) cells[7]);
			item.setFeltscope((Double) cells[8]);
			item.setFeltaddress((String) cells[9]);
			item.setFlongitude((String) cells[10]);
			item.setFlatitude((String) cells[11]);
			item.setFaddress((String) cells[12]);
			item.setFdistance((Double) cells[13]);
			item.setFaddtime((java.sql.Timestamp) cells[14]);
			item.setFupdatetime((java.sql.Timestamp) cells[15]);
			item.setFremark((String) cells[16]);			
			item.setFareanumber((Integer) cells[17]);
			item.setFareaname((String) cells[18]);

			LocElectfences.add(item);
		}
		return LocElectfences;
	}
	
	private List<UserWatch> ListUser(int offset, int length,HashMap<String, String> map) {

		String where = " ";
		
		if(map!=null && map.size() > 0)
		{

//			if(map.containsKey("funiqueid") && map.get("funiqueid")!=null && !map.get("funiqueid").toString().equals(""))
//			{
//				where += " and a.funiqueid = '"+map.get("funiqueid")+"' ";
//			}	
//			
			if (map.containsKey("user.funiqueid") && map.get("user.funiqueid") != null
					&& !map.get("user.funiqueid").toString().equals("")) {
				where += " and a.funiqueid = '" + map.get("user.funiqueid") + "' ";
			}				
		}		
				
	    StringBuffer  sql = new StringBuffer();
        sql.append(" SELECT a.funiqueid,a.id,c.serialnumber,a.username,a.phone,a.password,a.sex,a.status,a.createtime,a.fmobile,a.nickname,a.birthday,a.height,a.weight,a.picture,a.flogcount,a.floglasttime,a.floglaspip,a.fienabled,a.fdatastatus,a.fremark,a.femail,a.furl,a.faddress ");       
        sql.append(" FROM USER a  inner join t_user_snrelate b ");        
        sql.append(" on a.funiqueid=b.FUserIDStr inner join serialnumber c on c.funiqueid = b.FSNIDStr ");       
		sql.append(" WHERE b.FDataStatus=1 | b.FDataStatus ");
		sql.append(where);

		Query query = manager.createNativeQuery(sql.toString());

		List rows = query.getResultList();
		List<UserWatch> Users = new ArrayList<UserWatch>();
		
		for (Object row : rows) {
			Object[] cells = (Object[]) row;
			
			UserWatch item = new UserWatch();	
            
            item.setFuniqueid((String)cells[0]);            
            item.setId((Integer)cells[1]);            
            item.setSerialnumber((String)cells[2]);            
            item.setUsername((String)cells[3]);            
            item.setPhone((String)cells[4]);            
            item.setPassword((String)cells[5]);            
            item.setSex((String)cells[6]);            
            item.setStatus((String)cells[7]);            
            item.setCreatetime((String)cells[8]);            
            item.setFmobile((String)cells[9]);            
            item.setNickname((String)cells[10]);            
            item.setBirthday((String)cells[11]);            
            item.setHeight((String)cells[12]);            
            item.setWeight((String)cells[13]);            
            item.setPicture((String)cells[14]);            
            item.setFlogcount((Integer)cells[15]);            
            item.setFloglasttime((java.sql.Timestamp)cells[16]);            
            item.setFloglaspip((String)cells[17]);            
            item.setFienabled((Integer)cells[18]);            
            item.setFdatastatus((Integer)cells[19]);            
            item.setFremark((String)cells[20]);            
            item.setFemail((String)cells[21]);            
            item.setFurl((String)cells[22]);            
            item.setFaddress((String)cells[23]);            
          			
			Users.add(item);			
		}
		return Users;
	}
	
		
	private List<LocElectfence> ListLatestLocaltion1(HashMap<String, String> map) {		
		String where = "";
		if (map.containsKey("user.funiqueid") && map.get("user.funiqueid") != null
				&& !map.get("user.funiqueid").toString().equals("")) {
			where += " and e.funiqueid = '" + map.get("user.funiqueid") + "' ";
		}
		if (map.containsKey("serialnumber") && map.get("serialnumber") != null
				&& !map.get("serialnumber").toString().equals("")) {
			where += " and  c.serialnumber = '" + map.get("serialnumber") + "' ";
			
			if(where.equals(""))
			{
				where = " and 1=0 ";
			}
		}
		
		StringBuffer sql = new StringBuffer();
		sql.append(" SELECT a.FLocFenID,a.FIncreaseID,a.FEltFenceID,a.FSerialnumber,a.FDataStatus,a.FFieldStatus,a.FEltLongitude,a.FEltLatitude,a.FEltScope,a.FEltAddress,a.FLongitude,a.FLatitude,a.FAddress,a.FDistance,a.FAddTime,a.FUpdateTime,a.FRemark ");
		sql.append(" ,b.id,b.name,c.fpicture,f.battery ");
		sql.append(" FROM T_LOC_ELECTFENCE a left join electfence b on a.FEltFenceID = b.id  and a.FFieldStatus=1  ");			
		sql.append(" inner join serialnumber c on c.serialnumber = a.FSerialnumber ");
		sql.append(" inner join t_user_snrelate d on d.FSNIDStr = c.funiqueid ");	
		sql.append(" inner join user e on d.FUserIDStr = e.funiqueid ");			
		sql.append(" left join locationinfo f on f.serialnumber =  c.serialnumber ");	
		
		sql.append(" WHERE 1 = 1 ");
		sql.append(where);
		sql.append(" order by a.FIncreaseID desc ");
		sql.append("limit 0,1");

		Query query = manager.createNativeQuery(sql.toString());

		List rows = query.getResultList();
		List<LocElectfence> LocElectfences = new ArrayList<LocElectfence>();

		for (Object row : rows) {
			Object[] cells = (Object[]) row;

			LocElectfence item = new LocElectfence();

			item.setFlocfenid((String) cells[0]);
			item.setFincreaseid((Integer) cells[1]);
			item.setFeltfenceid((Integer) cells[2]);
			item.setFserialnumber((String) cells[3]);
			item.setFdatastatus((Integer) cells[4]);
			item.setFfieldstatus((Integer) cells[5]);
			item.setFeltlongitude((String) cells[6]);
			item.setFeltlatitude((String) cells[7]);
			item.setFeltscope((Double) cells[8]);
			item.setFeltaddress((String) cells[9]);
			item.setFlongitude((String) cells[10]);
			item.setFlatitude((String) cells[11]);
			item.setFaddress((String) cells[12]);
			item.setFdistance((Double) cells[13]);
			item.setFaddtime((java.sql.Timestamp) cells[14]);
			item.setFupdatetime((java.sql.Timestamp) cells[15]);
			item.setFremark((String) cells[16]);			
			item.setFareanumber((Integer) cells[17]);
			item.setFareaname((String) cells[18]);			
			item.setFpicture((String) cells[19]);

			item.setBattery((String) cells[20]);
			
			LocElectfences.add(item);
		}
		return LocElectfences;
	}
	
	@Override
	public List<LocElectfence> ListLatestLocaltion(HashMap<String, String> map) {

		List<UserWatch> listUser =this.ListUser(0, 100,map);
		
		List<LocElectfence> listData = new ArrayList<LocElectfence>();
		
		if(listUser!=null && listUser.size()>0)
		{
			for(int i=0;i<listUser.size();i++){
				HashMap<String, String> map1 = new HashMap<String, String>();
				map1.put("user.funiqueid", listUser.get(i).getFuniqueid());
				map1.put("serialnumber",  listUser.get(i).getSerialnumber());
				
//				logger.info(String.format("yang info funiqueid:%s,serialnumber:%s", listUser.get(i).getFuniqueid(),listUser.get(i).getSerialnumber()));
				
	
				List<LocElectfence> childloc = this.ListLatestLocaltion1(map1);
				listData.addAll(childloc);
			}			
			
		}	
		
		return listData;
		
	}
}